---
- name: Deploy Docker container on Ubuntu EC2
  hosts: all
  become: yes
  vars:
    docker_image: esraa114/depi_petclinic:latest 
    container_name: "petclinic_app"
    host_port: 5050
    container_port: 8080
    db_container_name : petsql
    venv_path: "/opt/ansible-venv"
  
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install dependencies for Docker installation
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Install Python3 and venv
      apt:
        name:
          - python3
          - python3-venv
        state: present

    - name: Create a Python virtual environment
      command: python3 -m venv {{ venv_path }}
      args:
        creates: "{{ venv_path }}"

    - name: Set Python interpreter variable
      set_fact:
        ansible_python_interpreter: "{{ venv_path }}/bin/python"

    - name: Install Docker SDK for Python in the virtual environment
      command: "{{ venv_path }}/bin/pip install docker"
      
    - name: Download Docker installation script
      command: curl -fsSL https://get.docker.com -o get-docker.sh
      args:
        chdir: "{{ ansible_env.HOME }}"  # Ensure you're in the user's home directory

    - name: Run Docker installation script
      command: sh get-docker.sh
      args:
        chdir: "{{ ansible_env.HOME }}"  # Specify the directory where get-docker.sh is located

    - name: Ensure Docker is running
      service:
        name: docker
        state: started
        enabled: true
    - name: Create application directory
      ansible.builtin.file:
          path: /opt/petclinic
          state: directory
          
    - name: Copy database_init_mw directory to target machine
      ansible.builtin.copy:
        src: "{{ lookup('env', 'WORKSPACE') }}/database_init_mw/"
        dest: /opt/petclinic/database_init_mw/
        mode: '0755'
       

    - name: Copy docker-compose.yml file to target machine
      ansible.builtin.synchronize:
        src:  "{{ lookup('env', 'WORKSPACE') }}/docker-compose.yml"
        dest: /opt/petclinic/docker-compose.yml
        recursive: yes

    - name: Deploy the application with Docker Compose
      ansible.builtin.command:
          cmd: docker compose up -d
      args:
          chdir: /opt/petclinic  # Make sure this is the correct path where your docker-compose.yml file is located
    - name: Wait for MySQL container to be ready
      wait_for:
        port: 3306  # Default MySQL port
        delay: 10  # Delay before checking the port
        timeout: 60  # Total time to wait
        state: started
    
    # - name: Initialize database with schema and data
    #   command: >
    #         docker exec -i {{ db_container_name }} mysql -u root -pYOUR_ROOT_PASSWORD petclinic < /opt/petclinic/database_init_mw/01-schema.sql &&
    #         docker exec -i {{ db_container_name }} mysql -u root -pYOUR_ROOT_PASSWORD petclinic < /opt/petclinic/database_init_mw/02-data.sql
    #   args:
    #       chdir: /opt/petclinic/database_init_mw/
    #    # Prevent running this on the host
    
    

    # - name: Pull an image
    #   community.docker.docker_image:
    #     name: "{{ docker_image }}"
    #     source: pull
    #     pull:
    #       platform: amd64
        
    # - name: Stop and remove any existing container
    #   community.docker.docker_container:
    #     name: "{{ container_name }}"
    #     state: absent

    # - name: Run the new Docker container
    #   community.docker.docker_container:
    #     name: "{{ container_name }}"
    #     image: "{{ docker_image }}"
    #     state: started
    #     ports:
    #       - "{{ host_port }}:{{ container_port }}"
